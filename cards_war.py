"""_summary_
**Cards_war.py** je hlavn√≠ skript, kter√Ω ≈ô√≠d√≠ simulaci karetn√≠ hry **Vojna** pro **2 a≈æ 4 hr√°ƒçe**.  
Vyu≈æ√≠v√° objektovƒõ orientovan√Ω p≈ô√≠stup a pracuje s t≈ô√≠dami **`Card`**, **`Deck`** a **`Player`**.  

## ‚ú® Kl√≠ƒçov√© vlastnosti:
- **Podpora v√≠ce hr√°ƒç≈Ø** (2‚Äì4).
- **Automatick√° hern√≠ smyƒçka**, kter√° pokraƒçuje, dokud nez≈Østane jen jeden hr√°ƒç s kartami.
- **Spr√°vn√° logika vojny** ‚Äì pokud dojde k rem√≠ze, hr√°ƒçi pokl√°daj√≠ karty l√≠cem dol≈Ø i nahoru.
- **Logov√°n√≠ do souboru `cards_war.log`** ‚Äì zaznamen√°v√° pr≈Øbƒõh hry, v√≠tƒõze kol i vojny.
- **ƒåist√° a modul√°rn√≠ OOP struktura** ‚Äì jednotliv√© t≈ô√≠dy jsou ulo≈æeny ve vlastn√≠ch souborech.

### Mo≈æn√© roz≈°√≠≈ôen√≠:
- **Pou≈æit√≠ dekor√°toru `@log_action`**, kter√Ω automaticky zapisuje d≈Øle≈æit√© ud√°losti hry.

## üöÄ Jak hra funguje?
1. Vytvo≈ô√≠ se **bal√≠ƒçek karet** a **hr√°ƒçi**.
2. Hr√°ƒçi **postupnƒõ hraj√≠ karty**, nejvy≈°≈°√≠ karta vyhr√°v√° kolo.
3. P≈ôi **rem√≠ze nast√°v√° vojna**, kde hr√°ƒçi pokl√°daj√≠ karty l√≠cem dol≈Ø i nahoru.
4. **Hra konƒç√≠**, kdy≈æ **zbude pouze jeden hr√°ƒç s kartami** nebo po 1000 kolech.

"""

from modules.deck import Deck
from modules.player import Player
import os
import sys

# Nastaven√≠ relativn√≠ cesty k logu
LOG_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "log")  # Relativn√≠ cesta k adres√°≈ôi /log
LOG_FILE = os.path.join(LOG_DIR, "cards_war.log")  # Pln√° cesta k logovac√≠mu souboru
LOG_ENABLED = True  # Lze zapnout/vypnout vol√°n√≠m enable_logging() / disable_logging()


# Pokud slo≈æka log neexistuje, vytvo≈ô√≠me ji
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)


def log_message(message: str):
    from datetime import datetime

    if LOG_ENABLED:
        with open(LOG_FILE, "a", encoding="utf-8") as log_file:
            log_file.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

'''
def log_action(func):
    """Dekor√°tor pro automatick√© logov√°n√≠ vol√°n√≠ funkc√≠.
    Args:
        func (function): Funkce, jej√≠≈æ vol√°n√≠ chceme zaznamenat.
    Returns:
        function: Ozdoben√° funkce s logov√°n√≠m.
    """

    def wrapper(*args, **kwargs):
        self = args[0]  # Prvn√≠ argument je v≈ædy `self` (instance WarGame)
        func_name = func.__name__  # N√°zev funkce
        result = func(*args, **kwargs)  # Zavol√°me p≈Øvodn√≠ funkci

        if func_name == "play_round":
            # Zaznamen√°me pr≈Øbƒõh kola
            log_message(
                f"Kolo {self.round_count}: {self.player1.name} zahr√°l {self.player1_last_card}, "
                f"{self.player2.name} zahr√°l {self.player2_last_card} ‚Üí {self.round_winner}"
            )
        elif func_name == "war":
            # Zaznamen√°me pr≈Øbƒõh vojny
            log_message(
                f"VOJNA! {self.player1.name} vs. {self.player2.name} ‚Üí v√≠tƒõz: {self.war_winner}"
            )

        return result  # Vr√°t√≠me v√Ωsledek p≈Øvodn√≠ funkce
    return wrapper
'''

class WarGame:
    """T≈ô√≠da reprezentuj√≠c√≠ hru Vojna pro 2 a≈æ 4 hr√°ƒçe."""

    def __init__(self, player_names):
        """Inicializuje hru, vytvo≈ô√≠ bal√≠ƒçek a rozdƒõl√≠ karty mezi hr√°ƒçe."""
        if len(player_names) < 2 or len(player_names) > 4:
            raise ValueError("Hra m≈Ø≈æe m√≠t pouze 2 a≈æ 4 hr√°ƒçe.")

        deck = Deck()
        hands = self.split_deck_for_players(deck, len(player_names))

        self.players = []
        i = 0
        while i < len(player_names):
            self.players.append(Player(player_names[i], hands[i]))
            i = i + 1

        self.round_count = 0

        # Build up the string exactly like the original print output
        names_str = ""
        j = 0
        while j < len(player_names):
            names_str = names_str + player_names[j]
            if j != len(player_names) - 1:
                names_str = names_str + ", "
            j = j + 1

        log_message("Hra zah√°jena: " + names_str)

    def split_deck_for_players(self, deck, num_players):
        """Rozdƒõl√≠ bal√≠ƒçek mezi hr√°ƒçe."""
        deck.shuffle_cards()
        result = []
        i = 0
        while i < num_players:
            hand = []
            j = i
            while j < len(deck.cards):
                hand.append(deck.cards[j])
                j = j + num_players
            result.append(hand)
            i = i + 1
        return result

    def play_round(self):
        """Odehraje jedno kolo hry."""
        self.round_count = self.round_count + 1

        if self.round_count > 1000:
            log_message("\nHra se zacyklila! Je to nuda. Rem√≠za.\n\n\n")
            import sys
            sys.exit("Hra se zacyklila! Je to nuda. Rem√≠za.\n\n\n")

        # Print round header (the output remains the same)
        print("\n=== Kolo " + str(self.round_count) + " ===")

        # Each player plays a card; build the dictionary manually
        played_cards = {}
        index = 0
        while index < len(self.players):
            if self.players[index].has_cards():
                card = self.players[index].play_card()
                played_cards[self.players[index]] = card
            index = index + 1

        # Print played cards
        for player in played_cards:
            print(player.name + " zahr√°l: " + str(played_cards[player]))

        # Determine the maximum card value played
        max_value = -1
        for key in played_cards:
            if played_cards[key].value > max_value:
                max_value = played_cards[key].value

        winners = []
        for key in played_cards:
            if played_cards[key].value == max_value:
                winners.append(key)

        if len(winners) == 1:
            winner = winners[0]
            print(winner.name + " vyhr√°v√° kolo!")
            all_cards = []
            for key in played_cards:
                all_cards.append(played_cards[key])
            winner.collect_cards(all_cards)
            log_text = "Kolo " + str(self.round_count) + ": "
            for key in played_cards:
                log_text = log_text + key.name + " " + str(played_cards[key]) + ", "
            log_text = log_text + "‚Üí V√≠tƒõz: " + winner.name
            log_message(log_text)
        else:
            names = ""
            k = 0
            while k < len(winners):
                names = names + winners[k].name
                if k != len(winners) - 1:
                    names = names + ", "
                k = k + 1
            print("Rem√≠za mezi " + names + "! VOJNA!")
            temp_cards = []
            for key in played_cards:
                temp_cards.append(played_cards[key])
            self.war(winners, temp_cards)

        # Print players' status
        status = ""
        m = 0
        while m < len(self.players):
            status = status + str(self.players[m])
            if m != len(self.players) - 1:
                status = status + " | "
            m = m + 1
        print(status)

    def war(self, tied_players, war_pile):
        """≈òe≈°√≠ vojnu mezi v√≠ce hr√°ƒçi."""
        i = 0
        while i < len(tied_players):
            if len(tied_players[i].hand) < 2:
                print(tied_players[i].name + " nem√° dost karet na vojnu a prohr√°v√°!")
                self.players.remove(tied_players[i])
                return
            i = i + 1

        print("Ka≈æd√Ω hr√°ƒç p≈ôid√°v√° jednu kartu l√≠cem dol≈Ø...")
        i = 0
        while i < len(tied_players):
            war_pile.append(tied_players[i].play_card())
            i = i + 1

        print("Ka≈æd√Ω hr√°ƒç p≈ôid√°v√° jednu kartu l√≠cem nahoru...")
        new_played_cards = {}
        i = 0
        while i < len(tied_players):
            new_played_cards[tied_players[i]] = tied_players[i].play_card()
            i = i + 1

        for player in new_played_cards:
            print(player.name + " zahr√°l: " + str(new_played_cards[player]))

        max_value = -1
        for key in new_played_cards:
            if new_played_cards[key].value > max_value:
                max_value = new_played_cards[key].value

        winners = []
        for key in new_played_cards:
            if new_played_cards[key].value == max_value:
                winners.append(key)

        for key in new_played_cards:
            war_pile.append(new_played_cards[key])

        if len(winners) == 1:
            winner = winners[0]
            print(winner.name + " vyhr√°v√° VOJNU!")
            winner.collect_cards(war_pile)
            log_message("VOJNA mezi " + ", ".join(p.name for p in tied_players) + " ‚Üí V√≠tƒõz: " + winner.name)
        else:
            print("Dal≈°√≠ rem√≠za! VOJNA pokraƒçuje!")
            self.war(winners, war_pile)

    def play_game(self):
        """Spust√≠ hru a pokraƒçuje, dokud nez≈Østane jeden hr√°ƒç s kartami."""
        print("\n=== Zaƒç√≠n√° hra Vojna! ===")
        names_str = ""
        i = 0
        while i < len(self.players):
            names_str = names_str + self.players[i].name
            if i != len(self.players) - 1:
                names_str = names_str + ", "
            i = i + 1
        print("Hraj√≠: " + names_str)

        while True:
            active = []
            i = 0
            while i < len(self.players):
                if self.players[i].has_cards():
                    active.append(self.players[i])
                i = i + 1
            if len(active) <= 1:
                break
            self.play_round()

        winner = None
        i = 0
        while i < len(self.players):
            if self.players[i].has_cards():
                winner = self.players[i]
                break
            i = i + 1

        if winner is not None:
            print("\n=== Konec hry! V√≠tƒõz: " + winner.name + " ===\n\n\n")
            log_message("Hra skonƒçila! V√≠tƒõz: " + winner.name)
            log_message("\n\n ============================================= \n\n\n")


############## MAIN ##############
if __name__ == "__main__":
    game = WarGame(["V√°lek", "Hrnƒçi≈ô√≠k", "Metelka", "Urubek"])
    game.play_game()



